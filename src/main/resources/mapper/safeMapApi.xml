<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.scheduler.mapper.SafemapMapper">
    <insert id="insertConvenienceStore" parameterType="java.util.List">
        INSERT INTO map.convenience_store
        (objt_id, fclty_cd, fclty_nm, adres, rn_adres, sgg_cd, emd_cd, ctprvn_cd,
        telno, fclty_ty, data_yr, x, y, raw, geom, created_at, updated_at)
        SELECT
        v.objt_id, v.fclty_cd, v.fclty_nm, v.adres, v.rn_adres, v.sgg_cd, v.emd_cd, v.ctprvn_cd,
        v.telno, v.fclty_ty, v.data_yr, v.x, v.y, v.raw,
        CASE
        WHEN v.x IS NOT NULL AND v.y IS NOT NULL
        THEN ST_SetSRID(ST_MakePoint(v.x, v.y), 3857)
        ELSE NULL
        END AS geom,
        now(), now()
        FROM (
        VALUES
        <foreach collection="list" item="i" separator=",">
            (
            CAST(#{i.objtId} AS bigint),
            #{i.fcltyCd},
            #{i.fcltyNm},
            #{i.adres},
            #{i.rnAdres},
            #{i.sggCd},
            #{i.emdCd},
            #{i.ctprvnCd},
            #{i.telno},
            #{i.fcltyTy},
            CAST(#{i.dataYr} AS integer),
            CAST(#{i.x} AS double precision),
            CAST(#{i.y} AS double precision),
            CAST(#{i.rawJson} AS jsonb)
            )
        </foreach>
        ) AS v(
        objt_id, fclty_cd, fclty_nm, adres, rn_adres, sgg_cd, emd_cd, ctprvn_cd,
        telno, fclty_ty, data_yr, x, y, raw
        )
        LEFT JOIN map.convenience_store cs
        ON cs.objt_id = v.objt_id
        WHERE cs.objt_id IS NULL
    </insert>
    <insert id="insertConvenienceStoreGeojson">
        CREATE OR REPLACE VIEW map.v_convenience_store_geojson AS
        WITH dedup AS (
            SELECT DISTINCT ON (x, y)
            objt_id, fclty_nm, adres, rn_adres, x, y, geom
            FROM map.convenience_store
            WHERE geom IS NOT NULL
            ORDER BY x, y, objt_id DESC         -- 같은 (x,y) 안에서 objt_id가 가장 큰 행 선택
        ),
        feat AS (
            SELECT json_build_object(
            'type','Feature',
            'id',   'map:convenience_store.' || objt_id::text,
            'geometry',  ST_AsGeoJSON(geom)::json,
            'properties', json_build_object(
            'fclty_nm', fclty_nm,
            'adres',    adres,
            'rn_adres', rn_adres,
            'x',        x,
            'y',        y
        )
        ) AS feature
        FROM dedup
        )
        SELECT json_build_object(
            'type','FeatureCollection',
            'features', COALESCE(json_agg(feature), '[]'::json)
        ) AS geojson
        FROM feat

    </insert>
</mapper>
